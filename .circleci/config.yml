#
# CircleCI configuration file
#
version: 2.1

#
# Common vars
#
var_docker_default: &default_docker
    docker:
        - image: circleci/python:3-node

#
# Job definitions
#
jobs:
    # Build and cache flask app docker image
    build-flask-app:
        <<: *default_docker
        working_directory: ~/repo
        steps:
            - checkout:
                path: ~/repo
            - setup_remote_docker
            - run:
                name: Build docker image
                command: |
                    cd ~/repo/.scripts
                    ./build_flask_docker_image.sh
            - run:
                name: Cache docker image
                command: |
                    cd ~/repo/.scripts
                    ./cache_flask_docker_image.sh
            # Persist image tar for later use, only push when tests have passed
            - persist_to_workspace:
                root: ~/repo
                paths:
                    - .image_cache
    build-react-app:
        <<: *default_docker
        working_directory: ~/repo
        steps:
            - checkout:
                path: ~/repo
            - setup_remote_docker
            - run:
                name: Build docker image
                command: |
                    cd ~/repo/.scripts
                    ./build_react_docker_image.sh
            - run:
                name: Cache docker image
                command: |
                    cd ~/repo/.scripts
                    ./cache_react_docker_image.sh
            # Persist image tar for later use, only push when tests have passed
            - persist_to_workspace:
                root: ~/repo
                paths:
                    - .image_cache
    # Test flask app code
    test-flask-app:
        <<: *default_docker
        working_directory: ~/repo/flask_app
        steps:
            - checkout:
                path: ~/repo
            - run:
                name: Install dependencies
                command: python3 -m pip install -r requirements.txt
            - run:
                name: Run pylint
                command: python3 -m pylint api/simple_flask_app.py
            - run:
                name: Run tests
                command: python3 -m xmlrunner api/simple_flask_app_test.py -o test_results
            # Store results to trigger failures and as artifact for debugging purposes
            - store_test_results:
                path: test_results
            - store_artifacts:
                path: test_results
    # Test react app code
    test-react-app:
        <<: *default_docker
        working_directory: ~/repo/react_frontend
        steps:
            - checkout:
                path: ~/repo
            - run:
                name: Install dependencies
                command: yarn install
            - run:
                name: Run tests
                command: yarn test --reporters=default --reporters=jest-junit --maxWorkers=1
                environment:
                    JEST_JUNIT_OUTPUT: /home/circleci/repo/test-results/jest.tests.xml
            # Store results to trigger failures and as artifact for debugging purposes
            - store_test_results:
                path: test-results
            - store_artifacts:
                path: test-results
    # Full end to end tests
    full-e2e-tests:
        <<: *default_docker
        working_directory: ~/repo/.scripts
        steps:
            - checkout:
                path: ~/repo
            - attach_workspace:
                at: ~/repo
            - setup_remote_docker
            - run:
                name: Load cached images
                command: ./load_cached_images.sh
            - run:
                name: Run full stack e2e tests
                command: ./run_full_stack_e2e.sh
            # Store results to trigger failures and as artifact for debugging purposes
            - store_test_results:
                path: ~/repo/e2e-results/junit
            - store_artifacts:
                path: ~/repo/e2e-results
            - store_artifacts:
                path: ~/repo/e2e-logs
#
# Workflows
#
workflows:
    version: 2
    build-test-deploy:
        jobs:
            - build-flask-app
            - build-react-app
            - test-flask-app:
                # Test after successful build
                requires:
                    - build-flask-app
            - test-react-app:
                # Test after successful build
                requires:
                    - build-react-app
            - full-e2e-tests:
                # Full stack tests require previous jobs to have been completed
                requires:
                    - test-flask-app
                    - test-react-app